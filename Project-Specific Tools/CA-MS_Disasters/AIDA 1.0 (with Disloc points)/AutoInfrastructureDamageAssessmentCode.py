####################
# NASA DEVELOP Program
# LOCATION: Jet Propulsion Laboratory
# TERM: Summer 2013
# TEAM: CA/MS Disasters and Water Resources
# This Automated Infrastructure Damage Assessment 2.0 tool takes input infrastructure files and compares their location to displacement values from a grid of points with displacement values, which can be generated by Quakesim.
####################

import arcpy
import os
import string
from arcpy import env
if arcpy.CheckExtension("Spatial")== "Available":
    arcpy.CheckOutExtension("Spatial")
    from arcpy.sa import *
else:
    print "You do not have the Spatial Analyst Extension, and therefore cannot use this tool."
arcpy.env.overwriteOutput= True

#Inputs: Parameters not valued with a "GetParameterAsText" are not important but can be accessed in the same file as the Affected_Infrastructure_Output if desired.

#Work Folder= Where all files generated in the process of this tool will be put.
Work_Folder= arcpy.GetParameterAsText(0)

#First Infrastructure input file. If merge tool was used, then this is the output of that tool.
Infrastructure_1_Merged= arcpy.GetParameterAsText(1)

#If ROI is used, this is "Infrastructure_1_Merged" clipped by the ROI.
Infrastrucutre_1_Output= "DEL_Infra1_Clip.shp"

#Second Infrastructure input file. If merge tool was used, then this is the output of that tool.
Infrastructure_2_Merged= arcpy.GetParameterAsText(2)

#If ROI is used, this is "Infrastructure_2_Merged" clipped by the ROI.
Infrastructure_2_Output= "DEL_Infra2_Clip.shp"

#Third Infrastructure input file. If merge tool was used, then this is the output of that tool.
Infrastructure_3_Merged= arcpy.GetParameterAsText(3)

#If ROI is used, this is "Infrastructure_3_Merged" clipped by the ROI.
Infrastructure_3_Output= "DEL_Infra3_Clip.shp"

#Fourth Infrastructure input file. If merge tool was used, then this is the output of that tool.
Infrastructure_4= arcpy.GetParameterAsText(4)

#If ROI is used, this is Infrastructure_4 clipped by the ROI.
Infrastructure_4_Output= "DEL_Infra4_Output.shp"

#Fifth Infrastructure input file. If merge tool was used, then this is the output of that tool.
Infrastructure_5= arcpy.GetParameterAsText(5)

#If ROI is used, this is Infrastructure_5 clipped by the ROI.
Infrastructure_5_Output= "DEL_Infra5_Output.shp"

#The Quakesim_Input are the points with displacement values generated by the Quakesim software.
Quakesim_Input= arcpy.GetParameterAsText(6)

#The Threshold_Displacement_Value is the minimum displacement value that the user is interested in searching for. This should be the minimum amount of displacement that will cause damage. Also, this is in millimeters.
Threshold_Displacement_Value= arcpy.GetParameterAsText(7)

#The Contour_Map is the name and location of the generated contour map.
Contour_Map= arcpy.GetParameterAsText(8)

#If the Contour_Map name is more than 8 characters, the tool won't run and will return a confusing error message that does not explain the problem. This takes care of that.
(path,file_name)=os.path.split(Contour_Map)
if len(file_name)>=9:
    arcpy.AddError(" ")
    arcpy.AddError(" ")
    arcpy.AddError("The 'Contour_Map' name you have entered is too long. Please rerun the tool with a name 8 characters or less.")


#These are place holder files used in the tool. They are not important and can be deleted as soon as the tool has run successfully.
Reclass= "DEL_Reclass"
Points= "DEL_Points.shp"
Krig_Output= "DEL_Krig_Out"
Quakesim_Final= "DEL_Quakesim_Final.shp"
Reclass2= "DEL_Krig"

#Where the files will be saved:
folder_path= Work_Folder
arcpy.env.workspace= folder_path

#List where the updated infrastructure files will be placed
final_list= list()

#These are the if statements for each of the infastructure components. In the future if the user would like to add more components, simply copy one of the if statements and change the names and parameters.
if Infrastructure_1_Merged:
    arcpy.CopyFeatures_management(Infrastructure_1_Merged, Infrastrucutre_1_Output)
    final_list.append(Infrastrucutre_1_Output)
    arcpy.MakeFeatureLayer_management(Infrastrucutre_1_Output, "Infra1_lyr")

if Infrastructure_2_Merged:
    arcpy.CopyFeatures_management(Infrastructure_2_Merged, Infrastructure_2_Output)
    final_list.append(Infrastructure_2_Output)
    arcpy.MakeFeatureLayer_management(Infrastructure_2_Output, "Infra2_lyr")
    
if Infrastructure_3_Merged:
    arcpy.CopyFeatures_management(Infrastructure_3_Merged, Infrastructure_3_Output)
    final_list.append(Infrastructure_3_Output)
    arcpy.MakeFeatureLayer_management(Infrastructure_3_Output, "Infra3_lyr")

if Infrastructure_4:
    arcpy.CopyFeatures_management(Infrastructure_4, Infrastructure_4_Output)
    final_list.append(Infrastructure_4_Output)
    arcpy.MakeFeatureLayer_management(Infrastructure_4_Output, "Infra4_lyr")
    
if Infrastructure_5:
    arcpy.CopyFeatures_management(Infrastructure_5, Infrastructure_5_Output)
    final_list.append(Infrastructure_5_Output)
    arcpy.MakeFeatureLayer_management(Infrastructure_5_Output, "Infra5_lyr")

#Search cursor to find the range of values in the Quakesim Input
Quakesim_List= list()
Quakesim_Cursor= arcpy.SearchCursor(Quakesim_Input)
for row in Quakesim_Cursor:
    Disp= row.totalDisp
    if row == "nan":
        print "skip"
    else:
        Quakesim_List.append(Disp)

#Contour Map divisons.
Max= int(max(Quakesim_List))
Min= int(Threshold_Displacement_Value)
if Min >= Max:
    arcpy.AddError(" ")
    arcpy.AddError(" ")
    arcpy.AddError("Your Threshold_Displacement_Value is too large. Please try again with a smaller value.")
Ave= (Max + Min)/2
Ave_75= (Max + Ave)/2
Ave_25= (Ave + Min)/2

del Quakesim_Cursor

#This takes the Quakesim points input and turns it into a raster based on the displacement values, which are labelled as "totalDisp".
arcpy.FeatureToRaster_conversion(Quakesim_Input, "totalDisp", "Disp_raster")

#This reclassifies the values of the raster into integers and saves the file.
outReclass1 = Reclassify("Disp_raster", "Value", RemapValue([[0,Min,1],[Min,Ave_25,2],[Ave_25,Ave,3],[Ave,Ave_75,4],[Ave_75,Max+1,5]]))
outReclass1.save(Reclass)

#This takes the raster above and turns creates points for each pixel in the image.
arcpy.RasterToPoint_conversion(Reclass, Points, "VALUE")

#This takes the points created and merges them together based on their values. The output is polygons with different values. 
outKrig = Kriging(Points, "grid_code", KrigingModelOrdinary("SPHERICAL"))
outKrig.save(Krig_Output)

#This reclassifies the Kriging Output from a raster range of values to individual values.
outReclass1 = Reclassify(Krig_Output, "Value", RemapValue([[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5.5,5],[5.5,10000000000,"NoData"]]))
outReclass1.save(Reclass2)

#This turns the raster into a polygon.
arcpy.RasterToPolygon_conversion(Reclass2, Quakesim_Final, "NO_SIMPLIFY","VALUE")

#This turns the polygon into a layer.
arcpy.MakeFeatureLayer_management(Quakesim_Final, "Quakesim_lyr")

#These allow us to search for infrastructure data that is located within a user defined area (Where-Clause).
arcpy.SelectLayerByAttribute_management ("Quakesim_lyr", "NEW_SELECTION", """"GRIDCODE"=2""")
arcpy.SelectLayerByAttribute_management ("Quakesim_lyr", "ADD_TO_SELECTION", """"GRIDCODE"=3""")
arcpy.SelectLayerByAttribute_management ("Quakesim_lyr", "ADD_TO_SELECTION", """"GRIDCODE"=4""")
arcpy.SelectLayerByAttribute_management ("Quakesim_lyr", "ADD_TO_SELECTION", """"GRIDCODE"=5""")
if Infrastructure_1_Merged:
    arcpy.SelectLayerByLocation_management ("Infra1_lyr", "INTERSECT", "Quakesim_lyr")
    arcpy.CopyFeatures_management("Infra1_lyr", "Damaged_Infrastructure_1.shp")
if Infrastructure_2_Merged:
    arcpy.SelectLayerByLocation_management ("Infra2_lyr", "INTERSECT", "Quakesim_lyr")
    arcpy.CopyFeatures_management("Infra2_lyr", "Damaged_Infrastructure_2.shp")
if Infrastructure_3_Merged:
    arcpy.SelectLayerByLocation_management ("Infra3_lyr", "INTERSECT", "Quakesim_lyr")
    arcpy.CopyFeatures_management("Infra3_lyr", "Damaged_Infrastructure_3.shp")
if Infrastructure_4:
    arcpy.SelectLayerByLocation_management ("Infra4_lyr", "INTERSECT", "Quakesim_lyr")
    arcpy.CopyFeatures_management("Infra4_lyr", "Damaged_Infrastructure_4.shp")
if Infrastructure_5:
    arcpy.SelectLayerByLocation_management ("Infra5_lyr", "INTERSECT", "Quakesim_lyr")
    arcpy.CopyFeatures_management("Infra5_lyr", "Damaged_Infrastructure_5.shp")

#This creates the Contour Map.
outReclass1 = Reclassify(Reclass2, "Value", RemapValue([[0,1,Min],[1,2,Ave_25],[2,3,Ave],[3,4,Ave_75],[4,5,Max],[5,10000000000,"NoData"]]))
outReclass1.save(Contour_Map)

